// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Sequence model để quản lý số thứ tự tự tăng
model Sequence {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique  // Tên của sequence (vd: "user", "category", etc.)
  value Int    @default(1)  // Giá trị hiện tại
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   Int          @unique
  email         String        @unique
  password      String?
  name          String
  phoneNumber   String?
  address       String?
  avatar        String        @default("/uploads/avatars/default-avatar.png")
  role          Role          @default(USER)
  isDeleted     Boolean       @default(false)
  isGoogleAccount Boolean @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  orders        Order[]
  reservations  Reservation[]
  resetToken        String?
  resetTokenExpires DateTime?
  
  @@map("users")
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber Int       @unique
  name        String
  description String
  image       String
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    ProductCategory[]

  @@map("categories")
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  costPrice   Float       @default(0)  // Giá vốn của sản phẩm
  image       String?
  categories  ProductCategory[]
  unitId      String      @db.ObjectId
  unit        Unit        @relation(fields: [unitId], references: [id])
  orderItems  OrderItem[]
  isDeleted   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  comboItems  ComboItem[]
  @@map("products")
}

model ProductCategory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  product     Product   @relation(fields: [productId], references: [id])
  productId   String    @db.ObjectId
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([productId, categoryId])
  @@map("product_categories")
}

model Order {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   Int
  orderCode     String        @unique
  userId        String        @db.ObjectId
  user          User          @relation(fields: [userId], references: [id])
  items         OrderItem[]
  total         Float
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  address       String
  provinceCode  String
  provinceName  String
  districtCode  String
  districtName  String
  wardCode      String
  wardName      String
  phoneNumber   String
  note          String?       // Optional note for the restaurant
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model OrderItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String   @db.ObjectId
  order       Order    @relation(fields: [orderId], references: [id])
  productId   String?   @db.ObjectId
  product     Product?  @relation(fields: [productId], references: [id])
  comboId     String?   @db.ObjectId
  combo       Combo?    @relation(fields: [comboId], references: [id])
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("order_items")
}

model Table {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber Int         @unique
  number      Int
  capacity    Int
  status      TableStatus @default(AVAILABLE)
  isDeleted   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  reservations Reservation[]

  @@map("tables")
}

model Reservation {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber Int               @unique
  status      ReservationStatus @default(PENDING)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  date        DateTime
  time        String
  guests      Int
  name        String
  phone       String
  email       String
  note        String?
  isDeleted   Boolean           @default(false)
  tableId     String            @db.ObjectId
  table       Table             @relation(fields: [tableId], references: [id])
  userId      String            @db.ObjectId
  user        User              @relation(fields: [userId], references: [id])

  @@map("reservations")
}

model Combo {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber Int         @unique
  name        String
  description String
  price       Float
  image       String?
  isDeleted   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       ComboItem[]
  orderItems  OrderItem[]

  @@map("combos")
}

model ComboItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  comboId   String   @db.ObjectId
  combo     Combo    @relation(fields: [comboId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])

  @@map("combo_items")
}

model Unit {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  products  Product[]
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("units")
}

enum Role {
  USER
  ADMIN
  STAFF
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERING
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum PaymentMethod {
  CASH
  VNPAY
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  DELETED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
} 